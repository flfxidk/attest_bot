import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta, time
import asyncio
import json

API_TOKEN = '7548409263:AAFNaPL60NY57fB8mwXunFZkpawUPksNZPI'
ADMIN_ID = 417084716  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –•—Ä–∞–Ω–∏–ª–∏—â–µ FSM
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'certifications.json'

# FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
class DeleteCert(StatesGroup):
    waiting_for_index = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AddCert(StatesGroup):
    waiting_for_name = State()
    waiting_for_date = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìã –°–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")
    keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üóë –£–¥–∞–ª–∏—Ç—å")
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π\n/delete ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")

# –ö–æ–º–∞–Ω–¥–∞ /add
@dp.message_handler(commands=['add'])
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def cmd_add(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:")
    await AddCert.waiting_for_name.set()

@dp.message_handler(state=AddCert.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await AddCert.waiting_for_date.set()

@dp.message_handler(state=AddCert.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    try:
        cert_date = datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    user_state = await state.get_data()
    user_data.append({
        'name': user_state['name'],
        'date': message.text
    })
    data[user_id] = user_data
    save_data(data)
    await message.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await send_due_reminders(user_id)
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message_handler(commands=['list'])
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")
async def cmd_list(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    if not user_data:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π –ø—É—Å—Ç.")
    else:
        msg = "–¢–µ–∫—É—â–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:\n"
        for idx, item in enumerate(user_data):
            msg += f"{idx + 1}. üìå {item['name']} ‚Äî {item['date']}\n"
        await message.answer(msg, reply_markup=main_keyboard())

@dp.message_handler(commands=['delete'])
@dp.message_handler(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å")
async def cmd_delete(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    if not user_data:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=main_keyboard())
        return
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for i, item in enumerate(user_data):
        msg += f"{i + 1}. {item['name']} ({item['date']})\n"
    await message.answer(msg)
    await DeleteCert.waiting_for_index.set()

@dp.message_handler(state=DeleteCert.waiting_for_index)
async def process_delete(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    try:
        index = int(message.text.strip()) - 1
        if index < 0 or index >= len(user_data):
            raise ValueError
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    removed = user_data.pop(index)
    data[user_id] = user_data
    save_data(data)
    await message.answer(f"–£–¥–∞–ª–µ–Ω–æ: {removed['name']} ({removed['date']})", reply_markup=main_keyboard())
    await send_due_reminders(user_id)
    await state.finish()      

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data.startswith('attest_'))
async def attest_done(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    index = int(callback_query.data.split('_')[1])
    data = load_data()
    user_data = data.get(user_id, [])

    if index >= len(user_data):
        await callback_query.answer("–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∫–Ω–æ–ø–∫–∞.")
        return

    await bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è {user_data[index]['name']} (–î–î.–ú–ú.–ì–ì–ì–ì):")

    async def new_date_handler(message: types.Message):
        try:
            new_date = datetime.strptime(message.text, "%d.%m.%Y")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return await new_date_handler(message)
        user_data[index]['date'] = message.text
        data[user_id] = user_data
        await send_due_reminders(user_id) 
        save_data(data)
        await message.answer("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await send_due_reminders(user_id) 
        dp.unregister_message_handler(new_date_handler)

    dp.register_message_handler(new_date_handler)

async def send_due_reminders(user_id):
    now = datetime.now()
    data = load_data()
    certs = data.get(str(user_id), [])
    for i, item in enumerate(certs):
        try:
            cert_date = datetime.strptime(item['date'], "%d.%m.%Y")
        except:
            continue
        days_diff = (cert_date - now).days
        if days_diff in [3, 0] or days_diff < 0:
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ê—Ç—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ", callback_data=f"attest_{i}")
            )
            try:
                await bot.send_message(user_id,
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {item['name']}\n–î–∞—Ç–∞: {item['date']}",
                    reply_markup=kb
                )
            except Exception as e:
                logging.warning()    

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
async def reminder_loop():
    while True:
        now = datetime.now()
        target_time = datetime.combine(now.date(), time(9, 00))
        if now > target_time:
            target_time += timedelta(days=1)
        await asyncio.sleep((target_time - now).total_seconds())

        data = load_data()
        for user_id, certs in data.items():
            for i, item in enumerate(certs):
                try:
                    cert_date = datetime.strptime(item['date'], "%d.%m.%Y")
                except:
                    continue
                days_diff = (cert_date - datetime.now()).days
                if days_diff in [3, 0] or days_diff < 0:
                    try:
                        kb = InlineKeyboardMarkup().add(
                            InlineKeyboardButton("‚úÖ –ê—Ç—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ", callback_data=f"attest_{i}")
                        )
                        await bot.send_message(user_id,
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {item['name']}\n–î–∞—Ç–∞: {item['date']}",
                            reply_markup=kb
                        )
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(reminder_loop())
    executor.start_polling(dp, skip_updates=True)
