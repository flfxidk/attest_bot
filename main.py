import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta, time
import asyncio
import json

TOKEN = os.environ.get("7548409263:AAFNaPL60NY57fB8mwXunFZkpawUPksNZPI")

ADMIN_ID = 417084716  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –•—Ä–∞–Ω–∏–ª–∏—â–µ FSM
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'certifications.json'


# FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
class DeleteCert(StatesGroup):
    waiting_for_index = State()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AddCert(StatesGroup):
    waiting_for_name = State()
    waiting_for_date = State()


# FSM –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
class Suggestion(StatesGroup):
    waiting_for_suggestion = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)


def main_keyboard(user_id=None):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìã –°–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")
    keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üóë –£–¥–∞–ª–∏—Ç—å")
    
    # –î–ª—è –∞–¥–º–∏–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    if user_id and is_admin(user_id):
        keyboard.add("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    else:
        keyboard.add("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    
    return keyboard


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π\n/delete ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π\n/whoami ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
        reply_markup=main_keyboard(message.from_user.id))


# –ö–æ–º–∞–Ω–¥–∞ /whoami –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.message_handler(commands=['whoami'])
async def cmd_whoami(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    first_name = message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    is_admin_status = "‚úÖ –î–∞" if is_admin(user_id) else "‚ùå –ù–µ—Ç"
    
    info_msg = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n" \
               f"üÜî –í–∞—à ID: {user_id}\n" \
               f"üë®‚Äçüíº –ò–º—è: {first_name}\n" \
               f"üì± Username: @{username}\n" \
               f"üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin_status}"
    
    await message.answer(info_msg, reply_markup=main_keyboard(user_id))


# –ö–æ–º–∞–Ω–¥–∞ /add
@dp.message_handler(commands=['add'])
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def cmd_add(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:")
    await AddCert.waiting_for_name.set()


@dp.message_handler(state=AddCert.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await AddCert.waiting_for_date.set()


@dp.message_handler(state=AddCert.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    try:
        cert_date = datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    user_state = await state.get_data()
    user_data.append({'name': user_state['name'], 'date': message.text})
    data[user_id] = user_data
    save_data(data)
    await message.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard(message.from_user.id))
    await state.finish()


def get_status_emoji(cert_date_str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        cert_date = datetime.strptime(cert_date_str, "%d.%m.%Y")
        now = datetime.now()
        days_diff = (cert_date - now).days
        
        if days_diff < 0:
            return "üî¥"  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞
        elif days_diff <= 3:
            return "üü°"  # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç
        else:
            return "üü¢"  # –ê–∫—Ç—É–∞–ª—å–Ω–æ
    except ValueError:
        return "‚ùì"  # –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã


# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message_handler(commands=['list'])
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")
async def cmd_list(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    if not user_data:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π –ø—É—Å—Ç.",
                             reply_markup=main_keyboard(message.from_user.id))
    else:
        msg = "–¢–µ–∫—É—â–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:\n\n"
        for idx, item in enumerate(user_data):
            status_emoji = get_status_emoji(item['date'])
            msg += f"{idx + 1}. {status_emoji} {item['name']} ‚Äî {item['date']}\n"
        
        msg += "\nüü¢ ‚Äî –ê–∫—Ç—É–∞–ª—å–Ω–æ\nüü° ‚Äî –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (‚â§3 –¥–Ω—è)\nüî¥ ‚Äî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
        await message.answer(msg, reply_markup=main_keyboard(message.from_user.id))


@dp.message_handler(commands=['delete'])
@dp.message_handler(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å")
async def cmd_delete(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    if not user_data:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=main_keyboard(message.from_user.id))
        return
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for i, item in enumerate(user_data):
        msg += f"{i + 1}. {item['name']} ({item['date']})\n"
    await message.answer(msg)
    await DeleteCert.waiting_for_index.set()


@dp.message_handler(state=DeleteCert.waiting_for_index)
async def process_delete(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    try:
        index = int(message.text.strip()) - 1
        if index < 0 or index >= len(user_data):
            raise ValueError
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    removed = user_data.pop(index)
    data[user_id] = user_data
    save_data(data)
    await message.answer(f"–£–¥–∞–ª–µ–Ω–æ: {removed['name']} ({removed['date']})",
                         reply_markup=main_keyboard(message.from_user.id))
    await state.finish()


# FSM –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
class UpdateDate(StatesGroup):
    waiting_for_new_date = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data.startswith('attest_'))
async def attest_done(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = str(callback_query.from_user.id)
    index = int(callback_query.data.split('_')[1])
    data = load_data()
    user_data = data.get(user_id, [])

    if index >= len(user_data):
        await callback_query.answer("–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∫–Ω–æ–ø–∫–∞.")
        return

    await state.update_data(cert_index=index)
    await bot.send_message(
        user_id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è {user_data[index]['name']} (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await UpdateDate.waiting_for_new_date.set()
    await callback_query.answer()


@dp.message_handler(state=UpdateDate.waiting_for_new_date)
async def process_new_date(message: types.Message, state: FSMContext):
    try:
        new_date = datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, [])
    user_state = await state.get_data()
    index = user_state['cert_index']

    if index < len(user_data):
        user_data[index]['date'] = message.text
        data[user_id] = user_data
        save_data(data)
        await message.answer("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard(int(user_id)))
    await send_due_reminders(user_id)
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@dp.message_handler(lambda message: message.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def cmd_suggestions(message: types.Message):
    await message.answer(
        "üí° –ï—Å—Ç—å –∏–¥–µ—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞?\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!")
    await Suggestion.waiting_for_suggestion.set()


@dp.message_handler(state=Suggestion.waiting_for_suggestion)
async def process_suggestion(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    first_name = message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π"

    suggestion_text = f"üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n" \
                     f"üë§ –ò–º—è: {first_name}\n" \
                     f"üì± Username: @{username}\n" \
                     f"üÜî ID: {user_id}\n\n" \
                     f"üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n{message.text}"

    try:
        await bot.send_message(ADMIN_ID, suggestion_text)
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –û–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=main_keyboard(message.from_user.id))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard(message.from_user.id))

    await state.finish()


# FSM –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
class AdminMessage(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_message = State()


class AdminNotify(StatesGroup):
    waiting_for_user_id = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
def is_admin(user_id):
    return user_id == ADMIN_ID


# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(commands=['admin_message'])
async def admin_message_start(message: types.Message):
    
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await AdminMessage.waiting_for_user_id.set()


@dp.message_handler(state=AdminMessage.waiting_for_user_id)
async def admin_message_get_user(message: types.Message, state: FSMContext):
    
    try:
        target_user_id = int(message.text.strip())
        await state.update_data(target_user_id=target_user_id)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        await AdminMessage.waiting_for_message.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@dp.message_handler(state=AdminMessage.waiting_for_message)
async def admin_message_send(message: types.Message, state: FSMContext):
    
    user_state = await state.get_data()
    target_user_id = user_state['target_user_id']
    admin_message = message.text
    
    try:
        await bot.send_message(
            target_user_id,
            f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{admin_message}"
        )
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await state.finish()


# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.message_handler(commands=['admin_notify'])
async def admin_notify_start(message: types.Message):
    
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è—Ö (–∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
    await AdminNotify.waiting_for_user_id.set()


@dp.message_handler(state=AdminNotify.waiting_for_user_id)
async def admin_notify_send(message: types.Message, state: FSMContext):
    
    target = message.text.strip().lower()
    
    try:
        if target == 'all':
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            data = load_data()
            sent_count = 0
            for user_id in data.keys():
                await send_due_reminders(user_id)
                sent_count += 1
            await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        else:
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            target_user_id = int(target)
            await send_due_reminders(str(target_user_id))
            await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ 'all':")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    await state.finish()


# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message_handler(commands=['admin_stats'])
async def admin_stats(message: types.Message):
    
    data = load_data()
    total_users = len(data)
    total_certs = sum(len(certs) for certs in data.values())
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
    overdue_count = 0
    due_soon_count = 0
    active_count = 0
    
    now = datetime.now()
    for user_certs in data.values():
        for cert in user_certs:
            try:
                cert_date = datetime.strptime(cert['date'], "%d.%m.%Y")
                days_diff = (cert_date - now).days
                
                if days_diff < 0:
                    overdue_count += 1
                elif days_diff <= 3:
                    due_soon_count += 1
                else:
                    active_count += 1
            except ValueError:
                continue
    
    stats_msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n" \
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n" \
                f"üìã –í—Å–µ–≥–æ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π: {total_certs}\n\n" \
                f"üü¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö: {active_count}\n" \
                f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç: {due_soon_count}\n" \
                f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {overdue_count}\n\n" \
                f"üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n" \
                f"/admin_message - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n" \
                f"/admin_notify - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è—Ö\n" \
                f"/admin_stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    
    await message.answer(stats_msg)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
@dp.message_handler(lambda message: message.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def cmd_admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\nüÜî –í–∞—à ID: {message.from_user.id}\nüîß –°—Ç–∞—Ç—É—Å: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    
    admin_menu = """
üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**

üìä `/admin_stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
üì¢ `/admin_message` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  
üîî `/admin_notify` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é.
    """
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    admin_kb = InlineKeyboardMarkup(row_width=1)
    admin_kb.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_message"),
        InlineKeyboardButton("üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notify")
    )
    
    await message.answer(admin_menu, reply_markup=admin_kb, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.callback_query_handler(lambda c: c.data.startswith('admin_'))
async def admin_panel_callback(callback_query: types.CallbackQuery):
    
    command = callback_query.data
    
    if command == "admin_stats":
        await admin_stats(callback_query.message)
    elif command == "admin_message":
        await admin_message_start(callback_query.message)
    elif command == "admin_notify":
        await admin_notify_start(callback_query.message)
    
    await callback_query.answer()


async def send_due_reminders(user_id):
    now = datetime.now()
    data = load_data()  # –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    certs = data.get(str(user_id), [])

    for i, item in enumerate(certs):
        try:
            cert_date = datetime.strptime(item['date'], "%d.%m.%Y")
        except:
            continue

        days_diff = (cert_date - now).days

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        if days_diff in [3, 0] or days_diff < 0:
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ê—Ç—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ",
                                     callback_data=f"attest_{i}"))
            try:
                status = ""
                if days_diff < 0:
                    status = f" (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_diff)} –¥–Ω.)"
                elif days_diff == 0:
                    status = " (—Å–µ–≥–æ–¥–Ω—è)"
                elif days_diff == 3:
                    status = " (—á–µ—Ä–µ–∑ 3 –¥–Ω—è)"

                await bot.send_message(
                    user_id,
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {item['name']}\n–î–∞—Ç–∞: {item['date']}{status}",
                    reply_markup=kb)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
async def reminder_loop():
    while True:
        now = datetime.now()
        target_time = datetime.combine(now.date(), time(9, 00))
        if now > target_time:
            target_time += timedelta(days=1)
        await asyncio.sleep((target_time - now).total_seconds())

        data = load_data()
        for user_id, certs in data.items():
            for i, item in enumerate(certs):
                try:
                    cert_date = datetime.strptime(item['date'], "%d.%m.%Y")
                except:
                    continue
                days_diff = (cert_date - datetime.now()).days
                if days_diff in [3, 0] or days_diff < 0:
                    try:
                        kb = InlineKeyboardMarkup().add(
                            InlineKeyboardButton("‚úÖ –ê—Ç—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ",
                                                 callback_data=f"attest_{i}"))
                        await bot.send_message(
                            user_id,
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {item['name']}\n–î–∞—Ç–∞: {item['date']}",
                            reply_markup=kb)
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


async def startup_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    data = load_data()
    for user_id in data.keys():
        await send_due_reminders(user_id)


async def on_startup(dp):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await startup_reminders()
    logging.info("Startup reminders sent")


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(reminder_loop())
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

